const toDoList = {
	lastID: 0,
	tasks: [],
	findTask(id){
		return this.tasks.find(task => task.id === id);
	},
	addTasks(title, priority){
		this.tasks.push({
			id: ++this.lastID,
			title,
			priority,
		})
	},
	deleteTask(id){
		const taskExist = this.findTask(id)
		if(!taskExist){
			return;
		}
		this.tasks = this.tasks.filter(task => task.id !== id);
	},
	updateTask(id, newTitle, newPriority){
		const taskExist = this.findTask(id);
		if(!taskExist){
			return;
		}
		taskExist.title = newTitle;
		taskExist.priority = newPriority
	},
	sortByID(){
		this.tasks.sort((a, b) => a.id - b.id);
	},
	sortByPriority(){
		this.tasks.sort((a, b) => a.priority - b.priority)
	}
}

const newTask = {
	lastID: 0,
	tasks:[],
	findNewTask(id){
		return toDoList.findTask.call(newTask, id)
	},
	addNewTask(title, priority, description, order){
		toDoList.addTasks.call(newTask, title, priority);
		const addedTask = newTask.tasks.find(task => task.id === newTask.lastID);
		if(!addedTask){
			return;
		}
		addedTask.description = description;
		addedTask.order = order;
	},
	deleteNewTask(id){
		const taskExist = this.findNewTask(id);
		if(!taskExist){
			return;
		}
		this.tasks = this.tasks.filter(task => task.id !== id);
	},
	updateNewTask(id, newTitle, newPriority, newDescription, newOrder){
		const taskExist = this.findNewTask(id);
		if (!taskExist) {
			return;
		}
		taskExist.title = newTitle;
		taskExist.priority = newPriority;
		taskExist.description = newDescription;
		taskExist.order = newOrder;
	},
	sortNewTaskByPriority(){
		toDoList.sortByPriority.call(newTask);
	}
}

console.log(newTask.tasks);